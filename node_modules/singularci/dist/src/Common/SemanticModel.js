"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typedi_1 = require("typedi");
const Trigger_1 = __importDefault(require("../SemanticModel/Trigger"));
const Targets_1 = __importDefault(require("./../SemanticModel/Targets"));
const Variables_1 = __importDefault(require("./../SemanticModel/Variables"));
let SemanticModel = class SemanticModel {
    constructor() {
        this.stages = [];
        this.trigger = new Trigger_1.default();
        this.platformTargets = new Targets_1.default();
        this.variables = new Variables_1.default();
    }
    setPlatformTargets(platformTargets) {
        this.platformTargets = platformTargets;
    }
    setVariables(variables) {
        this.variables = variables;
    }
    setTrigger(trigger) {
        this.trigger = trigger;
    }
    addStage(stage) {
        this.stages.push(stage);
    }
    getPlatformTargets() {
        return this.platformTargets;
    }
    getVariables() {
        return this.variables;
    }
    getTrigger() {
        return this.trigger;
    }
    getStages() {
        return this.stages;
    }
    setStages(stages) {
        this.stages = stages;
    }
    reset() {
        this.stages = [];
        this.platformTargets = new Targets_1.default();
        this.variables = new Variables_1.default();
        this.trigger = new Trigger_1.default();
    }
};
SemanticModel = __decorate([
    (0, typedi_1.Service)({ id: 'SemanticModel' }),
    __metadata("design:paramtypes", [])
], SemanticModel);
exports.default = SemanticModel;
//# sourceMappingURL=SemanticModel.js.map